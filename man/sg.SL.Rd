% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SL.R
\name{sg.SL}
\alias{sg.SL}
\title{SuperLearner for Estimating the Conditional Average Treatment Effect}
\usage{
sg.SL(W, A, Y, SL.library, g0 = NULL, family = binomial(),
  num.SL.folds = 10, separate.reg = TRUE, project = TRUE,
  num.SL.rep = 5, id = NULL, obsWeights = NULL, stratifyCV = FALSE,
  ipcw = FALSE, lib.ests = FALSE)
}
\arguments{
\item{W}{data frame with observations in the rows and baseline covariates used to form the subgroup in columns.}

\item{A}{binary treatment vector, where 1 indicates that an individual was treated.}

\item{Y}{real-valued outcome.}

\item{SL.library}{SuperLearner library (see documentation for \code{SuperLearner} in the corresponding package) used to estimate outcome regression, treatment mechanism (if unknown), and conditional average treatment effect function.}

\item{g0}{if known (as in a randomized controlled trial), a vector of probabilities of treatment A=1 given covariates. If \code{NULL}, \code{SuperLearner} will be used to estimate these probabilities.}

\item{family}{\code{binomial()} if outcome bounded in [0,1], or \code{gaussian()} otherwise. See \code{Details}.}

\item{num.SL.folds}{number of folds to use in SuperLearner.}

\item{separate.reg}{run separate outcome regressions for A=1 and A=0, stratified by observed A? Otherwise pools all data together and regresses Y against A,W.}

\item{project}{if \code{TRUE} and family is \code{binomial()}, then projects the initial estimate of the blip function into its attainable range [-1,1].}

\item{num.SL.rep}{final output is an average of num.SL.rep super-learner fits (repetition ensures minimal reliance on initial choice of folds)}

\item{id}{optional cluster identification variable}

\item{obsWeights}{observation weights}

\item{stratifyCV}{stratify validation folds by event counts (does this for estimation of outcome regression, treatment mechanism, and conditional average treatment effect function). Useful for rare outcomes}

\item{ipcw}{if TRUE, then does not estimate outcome regression (just sets it to zero for all covariate-treatment combinations)}

\item{lib.ests}{Also return the candidate optimal rule estimates in the super-learner library}
}
\value{
a list containing
\item{est}{Vector containing an estimate of the conditional average treatment effect function for each individual in the data set (conditional on the covariate strata they belong to).}
\item{SL}{\code{SuperLearner} object used to generate this estimate.}
}
\description{
This function estimates the average treatment effect conditional on baseline covariates.
}
\details{
If outcome is bounded in [0,1], then this functions respects that fact when estimating the outcome regression but not when estimating the conditional average treatment effect using the double robust loss presented in the below cited paper. Loss functions exist which do respect the bounds on the outcome (see the below cited paper), but we have not implemented them here.
}
\examples{
SL.library = c('SL.mean','SL.glm')
Qbar = function(a,w){plogis(a*w$W1)}
n = 1000
W = data.frame(W1=rnorm(n),W2=rnorm(n),W3=rnorm(n),W4=rnorm(n))
A = rbinom(n,1,1/2)
Y = rbinom(n,1,Qbar(A,W))

cate.est = sg.SL(W,A,Y,SL.library=SL.library,family=binomial())$est
plot(W$W1,cate.est)
}
\references{
A. R. Luedtke and M. J. van der Laan, ``Super-learning of an optimal dynamic treatment rule,'' \emph{International Journal of Biostatistics} (to appear), 2014.
}
\keyword{SuperLearner,}
\keyword{average}
\keyword{blip}
\keyword{conditional}
\keyword{effect,}
\keyword{function}
\keyword{treatment}
